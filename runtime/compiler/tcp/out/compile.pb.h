// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compile.proto

#ifndef PROTOBUF_INCLUDED_compile_2eproto
#define PROTOBUF_INCLUDED_compile_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_compile_2eproto 

namespace protobuf_compile_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_compile_2eproto
namespace TCP {
class ClientMsg;
class ClientMsgDefaultTypeInternal;
extern ClientMsgDefaultTypeInternal _ClientMsg_default_instance_;
class ServerMsg;
class ServerMsgDefaultTypeInternal;
extern ServerMsgDefaultTypeInternal _ServerMsg_default_instance_;
}  // namespace TCP
namespace google {
namespace protobuf {
template<> ::TCP::ClientMsg* Arena::CreateMaybeMessage<::TCP::ClientMsg>(Arena*);
template<> ::TCP::ServerMsg* Arena::CreateMaybeMessage<::TCP::ServerMsg>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace TCP {

enum ServerMsgType {
  requestInitAnalysis = 0,
  ServerMsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ServerMsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ServerMsgType_IsValid(int value);
const ServerMsgType ServerMsgType_MIN = requestInitAnalysis;
const ServerMsgType ServerMsgType_MAX = requestInitAnalysis;
const int ServerMsgType_ARRAYSIZE = ServerMsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerMsgType_descriptor();
inline const ::std::string& ServerMsgType_Name(ServerMsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerMsgType_descriptor(), value);
}
inline bool ServerMsgType_Parse(
    const ::std::string& name, ServerMsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerMsgType>(
    ServerMsgType_descriptor(), name, value);
}
enum ClientMsgType {
  requestCompleteAnalysis = 0,
  clientRequestInitAnalysis = 1,
  ClientMsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ClientMsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ClientMsgType_IsValid(int value);
const ClientMsgType ClientMsgType_MIN = requestCompleteAnalysis;
const ClientMsgType ClientMsgType_MAX = clientRequestInitAnalysis;
const int ClientMsgType_ARRAYSIZE = ClientMsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClientMsgType_descriptor();
inline const ::std::string& ClientMsgType_Name(ClientMsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClientMsgType_descriptor(), value);
}
inline bool ClientMsgType_Parse(
    const ::std::string& name, ClientMsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClientMsgType>(
    ClientMsgType_descriptor(), name, value);
}
// ===================================================================

class ServerMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCP.ServerMsg) */ {
 public:
  ServerMsg();
  virtual ~ServerMsg();

  ServerMsg(const ServerMsg& from);

  inline ServerMsg& operator=(const ServerMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerMsg(ServerMsg&& from) noexcept
    : ServerMsg() {
    *this = ::std::move(from);
  }

  inline ServerMsg& operator=(ServerMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerMsg* internal_default_instance() {
    return reinterpret_cast<const ServerMsg*>(
               &_ServerMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ServerMsg* other);
  friend void swap(ServerMsg& a, ServerMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerMsg* New() const final {
    return CreateMaybeMessage<ServerMsg>(NULL);
  }

  ServerMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerMsg& from);
  void MergeFrom(const ServerMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string text = 2;
  void clear_text();
  static const int kTextFieldNumber = 2;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // .TCP.ServerMsgType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::TCP::ServerMsgType type() const;
  void set_type(::TCP::ServerMsgType value);

  // @@protoc_insertion_point(class_scope:TCP.ServerMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_compile_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClientMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCP.ClientMsg) */ {
 public:
  ClientMsg();
  virtual ~ClientMsg();

  ClientMsg(const ClientMsg& from);

  inline ClientMsg& operator=(const ClientMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientMsg(ClientMsg&& from) noexcept
    : ClientMsg() {
    *this = ::std::move(from);
  }

  inline ClientMsg& operator=(ClientMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientMsg* internal_default_instance() {
    return reinterpret_cast<const ClientMsg*>(
               &_ClientMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ClientMsg* other);
  friend void swap(ClientMsg& a, ClientMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientMsg* New() const final {
    return CreateMaybeMessage<ClientMsg>(NULL);
  }

  ClientMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClientMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClientMsg& from);
  void MergeFrom(const ClientMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string text = 2;
  void clear_text();
  static const int kTextFieldNumber = 2;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // .TCP.ClientMsgType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::TCP::ClientMsgType type() const;
  void set_type(::TCP::ClientMsgType value);

  // @@protoc_insertion_point(class_scope:TCP.ClientMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_compile_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServerMsg

// .TCP.ServerMsgType type = 1;
inline void ServerMsg::clear_type() {
  type_ = 0;
}
inline ::TCP::ServerMsgType ServerMsg::type() const {
  // @@protoc_insertion_point(field_get:TCP.ServerMsg.type)
  return static_cast< ::TCP::ServerMsgType >(type_);
}
inline void ServerMsg::set_type(::TCP::ServerMsgType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:TCP.ServerMsg.type)
}

// string text = 2;
inline void ServerMsg::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerMsg::text() const {
  // @@protoc_insertion_point(field_get:TCP.ServerMsg.text)
  return text_.GetNoArena();
}
inline void ServerMsg::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCP.ServerMsg.text)
}
#if LANG_CXX11
inline void ServerMsg::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCP.ServerMsg.text)
}
#endif
inline void ServerMsg::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCP.ServerMsg.text)
}
inline void ServerMsg::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCP.ServerMsg.text)
}
inline ::std::string* ServerMsg::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:TCP.ServerMsg.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerMsg::release_text() {
  // @@protoc_insertion_point(field_release:TCP.ServerMsg.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerMsg::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:TCP.ServerMsg.text)
}

// -------------------------------------------------------------------

// ClientMsg

// .TCP.ClientMsgType type = 1;
inline void ClientMsg::clear_type() {
  type_ = 0;
}
inline ::TCP::ClientMsgType ClientMsg::type() const {
  // @@protoc_insertion_point(field_get:TCP.ClientMsg.type)
  return static_cast< ::TCP::ClientMsgType >(type_);
}
inline void ClientMsg::set_type(::TCP::ClientMsgType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:TCP.ClientMsg.type)
}

// string text = 2;
inline void ClientMsg::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientMsg::text() const {
  // @@protoc_insertion_point(field_get:TCP.ClientMsg.text)
  return text_.GetNoArena();
}
inline void ClientMsg::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCP.ClientMsg.text)
}
#if LANG_CXX11
inline void ClientMsg::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCP.ClientMsg.text)
}
#endif
inline void ClientMsg::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCP.ClientMsg.text)
}
inline void ClientMsg::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCP.ClientMsg.text)
}
inline ::std::string* ClientMsg::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:TCP.ClientMsg.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientMsg::release_text() {
  // @@protoc_insertion_point(field_release:TCP.ClientMsg.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientMsg::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:TCP.ClientMsg.text)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TCP

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::TCP::ServerMsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TCP::ServerMsgType>() {
  return ::TCP::ServerMsgType_descriptor();
}
template <> struct is_proto_enum< ::TCP::ClientMsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TCP::ClientMsgType>() {
  return ::TCP::ClientMsgType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_compile_2eproto
